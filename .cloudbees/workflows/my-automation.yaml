apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: My automation
on:
  push:
    branches:
      - "**"
jobs:
  Checkout:
    steps:
      - name: checkout
        uses: cloudbees-io/checkout@v1

  Build:
    needs: Checkout
    steps:
      - uses: docker://alpine/git:latest
        run: |
          git config --global --add safe.directory /cloudbees/workspace
      - name: checkout
        uses: cloudbees-io/checkout@v1
      - name: Build
        uses: docker://maven:3-eclipse-temurin-17
        run: |
          mvn clean install -DskipTests=true
  
      - name: Configure AWS credentials
        uses: cloudbees-io/configure-aws-credentials@v1
        with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
         aws-region: us-east-1

      - name: Create and use EC2 key pair
        uses: cloudbees-io/configure-aws-credentials@v1
        run: |
         aws ec2 create-key-pair --key-name petclinic1 --region us-east-1 --query 'KeyMaterial' --output text > petclinic1.pem
         chmod 400 petclinic1.pem
         INSTANCE_ID=$(aws ec2 run-instances --image-id ami-04b70fa74e45c3917 --instance-type t2.micro --key-name "petclinic1" --region us-east-1 --query 'Instances[0].InstanceId' --output text)
         echo $INSTANCE_ID > instance_id.txt

      - name: Get public IP address of EC2 instance
        uses: cloudbees-io/configure-aws-credentials@v1

        run: |
         INSTANCE_ID=$(cat instance_id.txt)
         PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
         echo $PUBLIC_IP > public_ip.txt

      - name: Transfer application files to EC2
        uses: docker://alpine/scp:latest

        run: |
         PUBLIC_IP=$(cat public_ip.txt)
         scp -o StrictHostKeyChecking=no -i petclinic1.pem -r target/spring-petclinic-config-server-3.2.4.jar ubuntu@$PUBLIC_IP:/home/ubuntu/

      - name: Deploy application on EC2
        uses: docker://alpine/ssh:latest
        run: |
         PUBLIC_IP=$(cat public_ip.txt)
         ssh -o StrictHostKeyChecking=no -i petclinic1.pem ubuntu@$PUBLIC_IP << 'EOF'
          cd /home/ubuntu/
          
          java -jar spring-petclinic-config-server-3.2.4.jar
         EOF