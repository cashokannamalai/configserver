apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: My automation
on:
  push:
    branches:
      - main
jobs:
  Checkout:
    steps:
      - name: Checkout
        uses: cloudbees-io/checkout@v1
      - name: Get Commit Info
        uses: docker://alpine/git:latest
        id: commitinfo
        run: |
          COMMIT_ID=$(git rev-parse HEAD)
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "commit_id=${COMMIT_ID}" >> $CLOUDBEES_OUTPUTS/commit_id
          echo "commit_msg=${COMMIT_MSG}" >> $CLOUDBEES_OUTPUTS/commit_msg
    outputs:
      commit_id: ${{ steps.commitinfo.outputs.commit_id }}
      commit_msg: ${{ steps.commitinfo.outputs.commit_msg }}
  Build:
    needs: Checkout
    outputs:
      unitTestResults: ${{ steps.RunUnitTest.outputs.mvn_test_stdio1 }}
    steps:
      - name: Configure git
        uses: docker://alpine/git:latest
        run: |
          git config --global --add safe.directory /cloudbees/workspace
      - name: Checkout
        uses: cloudbees-io/checkout@v1
      - name: Build
        uses: docker://maven:3-eclipse-temurin-17
        run: |
          mvn clean install
      - name: RunUnitTest
        id: RunUnitTest
        uses: docker://maven:3-eclipse-temurin-17
        run: >
          mvn test > "$CLOUDBEES_OUTPUTS/mvn_test_stdio"

          cat "$CLOUDBEES_OUTPUTS/mvn_test_stdio" | grep "Tests run:" | tail -1
          > "$CLOUDBEES_OUTPUTS/mvn_test_stdio1"
      - name: Configure container registry credentials
        id: dockerconfig
        uses: cloudbees-io/configure-oci-credentials@v1
        with:
          registry: ${{ secrets.STAGING_DOCKER_REGISTRY }}
          username: ${{ secrets.STAGING_DOCKER_USERNAME }}
          password: ${{ secrets.STAGING_DOCKER_PASSWORD }}
      - name: Push image to OCI registry
        uses: cloudbees-io/kaniko@v1
        with:
          dockerfile: Dockerfile
          context: .
          destination: ${{ secrets.STAGING_DOCKER_REGISTRY }}/${{
            secrets.STAGING_DOCKER_USERNAME }}/configserver:3.2.4
  StaticAnalysis:
    outputs:
      BLOCKER_COUNT: ${{ steps.FetchSonarQubeIssues.outputs.BLOCKER_COUNT }}
      CRITICAL_COUNT: ${{ steps.FetchSonarQubeIssues.outputs.CRITICAL_COUNT }}
      MAJOR_COUNT: ${{ steps.FetchSonarQubeIssues.outputs.MAJOR_COUNT }}
      MINOR_COUNT: ${{ steps.FetchSonarQubeIssues.outputs.MINOR_COUNT }}
    steps:
      - uses: cloudbees-io/sonarqube-sast-scan-code@v1
        name: Scan
        kind: scan
        with:
          server-url: https://sonarqube.cb-demos.io
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}
          language: Java
      - uses: cloudbees-io/sonarqube-bundled-sast-scan-code@v2
        name: Scan with Java
        kind: scan
        with:
          language: JAVA
      - uses: cloudbees-io/findsecbugs-sast-scan-code@v1
        name: Scan with Find Security Bugs
        kind: scan
        with:
          language: LANGUAGE_JAVA
      - uses: sbatchelder-cba/sonarqube-cba@v0.0.3
        name: Scan GP
        with:
          project-key: config-server
          token: ${{ secrets.token }}
      - name: Fetch SonarQube Issues
        id: FetchSonarQubeIssues
        uses: docker://alpine/git:latest
        run: >
          apk add --no-cache curl jq

          curl -u ${{ secrets.username }}:${{ secrets.password }} \

          "https://sonarqube.cb-demos.io/api/issues/search?componentKeys=config-server&severities=BLOCKER,CRITICAL,MAJOR"
          \

          -o sonar-issues.json

          BLOCKER_COUNT=$(jq '[.issues[] | select(.severity=="BLOCKER")] |
          length' sonar-issues.json)

          CRITICAL_COUNT=$(jq '[.issues[] | select(.severity=="CRITICAL")] |
          length' sonar-issues.json)

          MAJOR_COUNT=$(jq '[.issues[] | select(.severity=="MAJOR")] | length'
          sonar-issues.json)

          MINOR_COUNT=$(jq '[.issues[] | select(.severity=="MINOR")] | length'
          sonar-issues.json)


          echo "BLOCKER_COUNT=${BLOCKER_COUNT}" >>
          $CLOUDBEES_OUTPUTS/BLOCKER_COUNT

          echo "CRITICAL_COUNT=${CRITICAL_COUNT}" >>
          $CLOUDBEES_OUTPUTS/CRITICAL_COUNT

          echo "MAJOR_COUNT=${MAJOR_COUNT}" >> $CLOUDBEES_OUTPUTS/MAJOR_COUNT

          echo "MINOR_COUNT=${MINOR_COUNT}" >> $CLOUDBEES_OUTPUTS/MINOR_COUNT
  ArtifactPublish:
    needs: Build
    steps:
      - uses: docker://alpine/git:latest
        run: |
          git config --global --add safe.directory /cloudbees/workspace
      - name: Checkout
        uses: cloudbees-io/checkout@v1
      - name: Publish to Nexus
        uses: docker://maven:3-eclipse-temurin-17
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: >
          mvn deploy \
            -DaltDeploymentRepository=nexus::default::https://${NEXUS_USERNAME}:${NEXUS_PASSWORD}@nexus.cb-demos.io/repository/Petclinic/
  Approval:
    needs: ArtifactPublish
    type: manual-approval
    environment: ashok
    steps:
      - name: Approval
        uses: docker://maven:3-eclipse-temurin-17
        run: |
          echo "Manual approval required before proceeding to deployment."
  SmokeTest:
    needs: Approval
    steps:
      - name: Checkout
        uses: cloudbees-io/checkout@v1
      - name: Smoke Test
        uses: docker://maven:3-eclipse-temurin-17
        run: |
          mvn test
  Deploy:
    outputs:
      deploy_status: ${{ steps.Deployimage.outputs.deploy_status }}
    needs: SmokeTest
    environment: ashok-Dora
    steps:
      - name: Checkout
        uses: cloudbees-io/checkout@v1
      - uses: cashokannamalai/kubeconfig@v1
        name: Set kubeconfig
        with:
          secname: ${{ secrets.kubeconfig }}
      - uses: docker://bitnami/kubectl:latest
        name: Deploy image
        id: Deployimage
        shell: sh
        run: |
          kubectl apply -f /cloudbees/workspace/deployment-service.yaml
          kubectl rollout status deployment/configserver-deployment -n ashok
          DEPLOY_STATUS=$(kubectl rollout status deployment/configserver-deployment -n ashok)
          if echo "$DEPLOY_STATUS" | grep -q "successfully rolled out"; then
            echo "Deployment successful" > $CLOUDBEES_OUTPUTS/deploy_status
          else
            echo "Deployment failed" > $CLOUDBEES_OUTPUTS/deploy_status
          fi

  Evidence:
    needs:
      - Deploy
      - Build
      - Checkout
      - StaticAnalysis
    steps:

      - name: Debug Deployment Status
        uses: docker://alpine/git:latest
        run: |
          echo "Deployment Status: ${{ needs.Deploy.outputs.deploy_status }}"

      - uses: cloudbees-io/publish-evidence-item@v1
        name: Publish evidence
        with:
          content: >
            - Workflow ID: ${{ cloudbees.run_id }}
            - URL: ${{ cloudbees.api.url }}
             ## Commit Information
            - **Commit ID:** "${{ needs.Checkout.outputs.commit_id }}"
            - **Commit Message:** "${{ needs.Checkout.outputs.commit_msg }}"
            - **Unit Test Results:** "${{ needs.Build.outputs.unitTestResults }}"
             ## SonarQube Analysis Results
            | Severity And Issue Count |
            |------------------------|
            |  ${{ needs.StaticAnalysis.outputs.BLOCKER_COUNT }} |
            |  ${{ needs.StaticAnalysis.outputs.CRITICAL_COUNT }} |
            |  ${{ needs.StaticAnalysis.outputs.MAJOR_COUNT }} |
            |  ${{ needs.StaticAnalysis.outputs.MINOR_COUNT }} |
             ## Deployment Status
            - Deployment: ${{ needs.Deploy.outputs.deploy_status }}

  JiraIntegration:
    needs:
      - Deploy
     
      - Checkout
      
    steps:
      - name: Create Jira Issue
        uses: docker://alpine:latest
        run: |
          curl -u ${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }} \
            -X POST \
            -H "Content-Type: application/json" \
            -d '{
              "fields": {
                "project": {
                  "key": "PROJ"
                },
                "summary": "Pipeline Completed",
                "description": "The pipeline has completed successfully. Commit ID: '"${{ needs.Checkout.outputs.commit_id }}"'",
                "issuetype": {
                  "name": "Task"
                }
              }
            }' \
            https://cloudbees.atlassian.net/rest/api/2/issue/
